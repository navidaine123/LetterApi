// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace Models.Migrations
{
    [DbContext(typeof(SmContext))]
    [Migration("20200819115400_replyToInMessageSenderRelationWithReciever")]
    partial class replyToInMessageSenderRelationWithReciever
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.MessageModels.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("ImportanceLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("MessageCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MessageNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Models.MessageModels.MessageReciever", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCc")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarked")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MessageSenderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("MessageSenderId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageRecievers");
                });

            modelBuilder.Entity("Models.MessageModels.MessageSender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsMarked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Prove")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("ReplyToId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ResendOnId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ReplyToId");

                    b.HasIndex("ResendOnId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageSenders");
                });

            modelBuilder.Entity("Test.Models.UserModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("DetailId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(11) CHARACTER SET utf8mb4")
                        .HasMaxLength(11);

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(11) CHARACTER SET utf8mb4")
                        .HasMaxLength(11);

                    b.Property<string>("PmPasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PmUniqueId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            FirstName = "نوید",
                            IsDeleted = false,
                            LastName = "آیینه وند",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mobile = "09361060437",
                            NationalCode = "98",
                            PasswordHash = new byte[] { 218, 118, 122, 165, 150, 3, 200, 58, 212, 176, 252, 104, 221, 201, 55, 175, 89, 240, 134, 122, 239, 183, 190, 174, 102, 25, 213, 254, 115, 122, 21, 194, 16, 126, 215, 174, 72, 64, 249, 208, 244, 23, 9, 54, 231, 30, 111, 118, 213, 190, 37, 151, 103, 12, 177, 221, 225, 140, 103, 172, 92, 25, 198, 65 },
                            PasswordSalt = new byte[] { 23, 137, 97, 235, 131, 137, 195, 247, 187, 209, 100, 185, 129, 249, 87, 134, 66, 194, 41, 93, 100, 202, 56, 78, 92, 119, 206, 171, 7, 212, 155, 166, 56, 52, 201, 73, 57, 188, 41, 27, 74, 116, 16, 192, 53, 243, 38, 187, 85, 63, 81, 47, 254, 31, 17, 216, 242, 63, 165, 78, 143, 189, 107, 162, 68, 164, 207, 111, 184, 226, 138, 66, 160, 192, 126, 42, 110, 50, 44, 188, 75, 116, 102, 149, 13, 169, 90, 51, 161, 121, 148, 232, 206, 142, 74, 206, 30, 157, 119, 45, 169, 150, 38, 132, 61, 10, 72, 101, 202, 154, 182, 145, 3, 166, 115, 9, 73, 18, 32, 122, 15, 21, 219, 252, 254, 215, 182, 61 },
                            UserName = "navid"
                        });
                });

            modelBuilder.Entity("Models.MessageModels.Message", b =>
                {
                    b.HasOne("Test.Models.UserModels.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.MessageModels.MessageReciever", b =>
                {
                    b.HasOne("Models.MessageModels.Message", "Message")
                        .WithMany("MessageRecievers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.MessageModels.MessageSender", "MessageSender")
                        .WithMany("MessageRecievers")
                        .HasForeignKey("MessageSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Models.UserModels.User", "User")
                        .WithMany("MessageRecievers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.MessageModels.MessageSender", b =>
                {
                    b.HasOne("Models.MessageModels.Message", "Message")
                        .WithMany("MessageSenders")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.MessageModels.MessageReciever", "ReplyTo")
                        .WithMany("ReplyFrom")
                        .HasForeignKey("ReplyToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.MessageModels.MessageReciever", "ResendOn")
                        .WithMany("ResentMessages")
                        .HasForeignKey("ResendOnId");

                    b.HasOne("Test.Models.UserModels.User", "User")
                        .WithMany("MessageSenders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
