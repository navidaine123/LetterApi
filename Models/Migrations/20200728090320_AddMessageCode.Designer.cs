// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace Models.Migrations
{
    [DbContext(typeof(SmContext))]
    [Migration("20200728090320_AddMessageCode")]
    partial class AddMessageCode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.MessageModels.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("ImportanceLevel")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("MessageCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MessageNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Models.MessageModels.MessageReciever", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCc")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MessageSenderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("MessageSenderId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageRecievers");
                });

            modelBuilder.Entity("Models.MessageModels.MessageSender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Prove")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("ResendOnId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ResendOnId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageSenders");
                });

            modelBuilder.Entity("Test.Models.UserModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("DetailId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(11) CHARACTER SET utf8mb4")
                        .HasMaxLength(11);

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(11) CHARACTER SET utf8mb4")
                        .HasMaxLength(11);

                    b.Property<string>("PmPasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PmUniqueId")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccessFailedCount = 0,
                            FirstName = "نوید",
                            IsDeleted = false,
                            LastName = "آیینه وند",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Mobile = "09361060437",
                            NationalCode = "98",
                            PasswordHash = new byte[] { 29, 233, 196, 82, 123, 124, 48, 194, 205, 231, 169, 125, 223, 213, 233, 16, 30, 190, 170, 97, 156, 143, 202, 227, 28, 177, 3, 55, 222, 127, 131, 28, 248, 14, 176, 96, 142, 106, 42, 69, 209, 193, 156, 4, 250, 125, 219, 226, 59, 197, 216, 166, 223, 25, 85, 125, 124, 38, 87, 192, 221, 33, 10, 241 },
                            PasswordSalt = new byte[] { 187, 113, 132, 104, 144, 230, 210, 165, 110, 196, 7, 216, 79, 33, 117, 160, 15, 118, 171, 60, 19, 95, 175, 243, 193, 234, 20, 46, 242, 86, 46, 46, 75, 86, 175, 165, 83, 236, 151, 113, 84, 151, 220, 58, 104, 135, 78, 10, 208, 42, 41, 217, 180, 185, 82, 3, 105, 216, 35, 193, 231, 70, 52, 105, 18, 93, 239, 29, 76, 2, 44, 54, 58, 206, 198, 44, 111, 171, 156, 180, 212, 96, 35, 180, 195, 13, 248, 24, 222, 171, 106, 128, 57, 53, 92, 87, 58, 173, 225, 144, 97, 231, 197, 15, 144, 16, 168, 59, 4, 37, 82, 226, 21, 202, 225, 95, 162, 45, 13, 211, 0, 126, 87, 254, 225, 59, 206, 203 },
                            UserName = "navid"
                        });
                });

            modelBuilder.Entity("Models.MessageModels.Message", b =>
                {
                    b.HasOne("Test.Models.UserModels.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.MessageModels.MessageReciever", b =>
                {
                    b.HasOne("Models.MessageModels.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("Models.MessageModels.MessageSender", "MessageSender")
                        .WithMany("MessageRecievers")
                        .HasForeignKey("MessageSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.MessageModels.MessageSender", b =>
                {
                    b.HasOne("Models.MessageModels.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("Models.MessageModels.MessageReciever", "ResendOn")
                        .WithMany("ResentMessages")
                        .HasForeignKey("ResendOnId");

                    b.HasOne("Test.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
